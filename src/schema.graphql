# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Auth {
  """JWT Bearer token"""
  token: String!
  user: User!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

"""Date custom scalar type"""
scalar Date

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
  changePassword(data: ChangePasswordInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Post {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  content: String!
  published: Boolean!
  author: User!
}

type PostConnection {
  edges: [PostEdge!]
  nodes: [Post!]
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  id
  createdAt
  updatedAt
  published
  title
  content
}

type Query {
  me: User!
  publishedPosts(orderBy: PostOrder, query: String, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  userPosts(userId: String!): [Post!]!
  post(postId: String!): Post!
  helloWorld: String!
  hello(name: String!): String!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  firstname: String
  lastname: String
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  firstname: String
  lastname: String
  role: Role!
  posts: [Post!]!
}
